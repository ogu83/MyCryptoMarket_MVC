@using Microsoft.AspNetCore.Identity
@using Binance.Net.Enums
@using MyCryptoMarket_MVC.Models
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@{
    ViewData["Title"] = "Trade";
}
@model TradeViewModel;

<div class="row">
    <div class="col-md-3">
        <label for="txt_symbol">Symbol</label>
        <h4 id="txt_symbol">@(Model.Symbol)</h2>
    </div>
    <div class="col-md-3">
        <label for="txt_lastPrice">Last Price</label>
        <h4 id="txt_lastPrice">@(Model.LastPrice)</h2>
    </div>
    <div class="col-md-3">
        <label for="txt_Change">24h Change</label>
        <h4 id="txt_Change">@(Model.PriceChangePercent.ToString("P"))</h2>
    </div>
    <div class="col-md-3">
        <label for="txt_Volume">24h Volume</label>
        <h4 id="txt_Volume">@(Model.Volume.ToString("N"))</h2>
    </div>
</div>

<div class="row">
    <div class="col-md-4">
        <label for="dd_Interval">Interval</label>
        <div id="dd_Interval"></div>
    </div>
    <div class="col-md-4">
        <label for="dt_StartDate">Start Date</label>
        <div id="dt_StartDate"></div>
    </div>
    <div class="col-md-4">
        <label for="dt_EndDate">End Date</label>
        <div id="dt_EndDate"></div>
    </div>
    <div class="col-md-12">
        <div id="chart"></div>
    </div>
</div>

<div class="row">
    
</div>

@section Scripts {
    <script>
        $(function() {

            function isNotEmpty(value) {
                return value !== undefined && value !== null && value !== "";
            }

            var today = new Date();
            var _Symbol = '@(Model.Symbol)';
            var _Interval = '@((int)KlineInterval.OneDay)';
            var _EndDate = today.toISOString();
            var _StartDate = new Date(today.setMonth(today.getMonth()-1)).toISOString();
            var _Intervals = [];

            var chartDataSource = new DevExpress.data.CustomStore({
                key: "Id",
                load: function (loadOptions) {                    
                    var deferred = $.Deferred(),
                        args = {
                            Symbol: _Symbol,
                            Interval: _Interval,
                            EndDate: _EndDate,
                            StartDate: _StartDate
                        };

                    $.ajax({
                        url: "/Trade/GetKlines",
                        method: "POST",
                        dataType: "json",
                        data: args,
                        success: function(result) {
                            deferred.resolve(result);
                        },
                        error: function() {
                            deferred.reject("Data Loading Error");
                        },
                        timeout: 50000
                    });

                    return deferred.promise();
                }
            });

            $("#chart").dxChart({
                title: "Chart",
                dataSource: chartDataSource,
                commonSeriesSettings: {
                    argumentField: "CloseTimeStr",
                    type: "candlestick"
                },
                legend: {
                    itemTextPosition: 'left'
                },
                series: [
                    { 
                        name: _Symbol,
                        openValueField: "Open", 
                        highValueField: "High", 
                        lowValueField: "Low", 
                        closeValueField: "Close", 
                        reduction: {
                            color: "red"
                        }
                    }
                ],    
                valueAxis: {
                    tickInterval: 1,
                    title: { 
                        text: ""
                    },
                    label: {
                        format: {
                            type: "decimal"                            
                        }
                    }
                },
                argumentAxis: {
                    workdaysOnly: false,
                    label: {
                        format: "shortDate"
                    }
                },
                "export": {
                    enabled: false
                },
                tooltip: {
                    enabled: true,
                    location: "edge",
                    customizeTooltip: function (arg) {
                        return {
                            text: 
                            "Open:  " + arg.openValue + "<br/>" +
                            "Close: " + arg.closeValue + "<br/>" +
                            "High:  " + arg.highValue + "<br/>" +
                            "Low:   " + arg.lowValue + "<br/>"
                        };
                    }
                }
            });

            $.ajax({
                url: "/Trade/GetIntervals",
                method: "POST",
                dataType: "json",
                data: null,
                success: function(result) {       
                    _Intervals = result;             
                    $("#dd_Interval").dxSelectBox({
                        dataSource: _Intervals,
                        valueExpr: "Id",
                        displayExpr: "Value",
                        placeholder: "Interval"
                    });
                    $("#dd_Interval").dxSelectBox("instance").option("value", 11);
                },
                error: function() {                    
                },
                timeout: 50000
            });

            $("#dt_StartDate").dxDateBox({
                type: "date",
                value: _StartDate,
                displayFormat: "dd/MM/yyyy",                
            });

            $("#dt_EndDate").dxDateBox({
                type: "date",
                value: _EndDate,
                displayFormat: "dd/MM/yyyy",
            });
        });
    </script>
}
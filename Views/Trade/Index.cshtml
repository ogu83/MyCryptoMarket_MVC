@using Microsoft.AspNetCore.Identity
@using Binance.Net.Enums
@using MyCryptoMarket_MVC.Models
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@{
    ViewData["Title"] = "Trade";
}
@model TradeViewModel;

<div class="row">
    <div class="col-md-4">
        <div class="row">
            <div class="col-md-6">
                <label for="txt_symbol">Symbol</label>
                <h4 id="txt_symbol">@(Model.Symbol)</h2>
            </div>
            <div class="col-md-6">
                <label for="txt_lastPrice">Last Price</label>
                <h4 id="txt_lastPrice">@(Model.LastPrice)</h2>
            </div>
            <div class="col-md-6">
                <label for="txt_Change">24h Change</label>
                <h4 id="txt_Change">@(Model.PriceChangePercent.ToString("P"))</h2>
            </div>
            <div class="col-md-6">
                <label for="txt_Volume">24h Volume</label>
                <h4 id="txt_Volume">@(Model.Volume.ToString("N"))</h2>
            </div>
        </div>
        <div class="col-md-12">
            <div class="row">
                <div class="col-md-4">
                    <label for="dd_Interval">Interval</label>
                    <div id="dd_Interval"></div>
                </div>
                <div class="col-md-4">
                    <label for="dt_StartDate">Start Date</label>
                    <div id="dt_StartDate"></div>
                </div>
                <div class="col-md-4">
                    <label for="dt_EndDate">End Date</label>
                    <div id="dt_EndDate"></div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-8">
        <div id="chart"></div>
    </div>
</div>

<div class="row">
    <div class="col-md-4">
        <div id="tab_Trade"></div>
        <div class="content">
            <div class="row" id="tab_Limit_Content">

                <div class="col-md-6">
                    <section class="panel" style="margin: auto; min-height: 332px;">
                        <header class="panel-heading bg-white">
                            <span class="title">Buy <span>@Model.Symbol </span></span>
                            <span class="text-muted m-l-small pull-right">Balance: <span class="symbol2-available balance-text">0.00</span></span>
                        </header>
                        <div class="block">
                            <form class="form">
                                <fieldset>
                                    <div class="control-group form-group ">
                                        <label class="control-label" for="buy-amount">Amount to Buy</label>
                                        <div class="controls">
                                            <div class="input-group">
                                                <input type="text" class="form-control input-small" name="amount" id="buy-amount" autocomplete="off" value="">
                                                <span class="input-group-addon"> </span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="control-group form-group ">
                                        <label class="control-label" for="buy-price">Price <span>@(Model.Symbol)</span></label>
                                        <div class="controls">
                                            <div class="input-group">
                                                <input type="number" class="form-control input-small" name="price" id="buy-price" autocomplete="off" value="@(Model.LastPrice)">
                                                <span class="input-group-addon"> </span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="control-group mini form-group">
                                        <div class="trade-form-auth-block">
                                            <button class="trade-form-auth-block-link btn btn-primary" href="#">Buy</a> 
                                        </div>
                                    </div>
                                </fieldset>
                                <div class="checkout">
                                    <div class="total checkout__total">
                                        <span class="total__label">Total</span> <span class="total__value">0.00</span> 
                                    </div>
                                    @* <div class="fee checkout__fee">
                                        <div class="fee__wrapper">
                                            <span class="fee__label">Fee</span><span class="fee__value-maker"> 0.00 </span><span class="fee__divider"></span>
                                            <span class="fee__value-taker">0.00 </span><span class="fee__symbol">USD</span>
                                        </div>
                                    </div> *@
                                </div>
                                <div class="row row-alert"></div>
                            </form>
                        </div>
                    </section>
                </div>

                <div class="col-md-6">
                    <section class="panel" style="margin: auto; min-height: 332px;">
                        <header class="panel-heading bg-white">
                            <span class="title">Sell <span>@Model.Symbol </span></span>
                            <span class="text-muted m-l-small pull-right">Balance: <span class="symbol2-available balance-text">0.00</span></span>
                        </header>
                        <div class="block">
                            <form class="form">
                                <fieldset>
                                    <div class="control-group form-group ">
                                        <label class="control-label" for="sell-amount">Amount to Sell</label>
                                        <div class="controls">
                                            <div class="input-group">
                                                <input type="number" class="form-control input-small" name="amount" id="sell-amount" autocomplete="off" value="">
                                                <span class="input-group-addon"> </span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="control-group form-group ">
                                        <label class="control-label" for="sell-price">Price <span>@(Model.Symbol)</span></label>
                                        <div class="controls">
                                            <div class="input-group">
                                                <input type="number" class="form-control input-small" name="price" id="sell-price" autocomplete="off" value="@(Model.LastPrice)">
                                                <span class="input-group-addon"> </span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="control-group mini form-group">
                                        <div class="trade-form-auth-block">
                                            <button class="trade-form-auth-block-link btn btn-primary" href="#">Sell</a> 
                                        </div>
                                    </div>
                                </fieldset>
                                <div class="checkout">
                                    <div class="total checkout__total">
                                        <span class="total__label">Total</span> <span class="total__value">0.00</span> 
                                    </div>
                                    @* <div class="fee checkout__fee">
                                        <div class="fee__wrapper">
                                            <span class="fee__label">Fee</span><span class="fee__value-maker"> 0.00 </span><span class="fee__divider"></span>
                                            <span class="fee__value-taker">0.00 </span><span class="fee__symbol">USD</span>
                                        </div>
                                    </div> *@
                                </div>
                                <div class="row row-alert"></div>
                            </form>
                        </div>
                    </section>
                </div>

            </div>
        </div>        
    </div>
    <div class="col-md-4">
        <label for="grd_buyOrders">Buy Orders</label>
        <div id="grd_buyOrders"></div>
    </div>
    <div class="col-md-4">
        <label for="grd_sellOrders">Sell Orders</label>
        <div id="grd_sellOrders"></div>
    </div>
</div>

@section Scripts {
    <script>
        $(function() {

            function isNotEmpty(value) {
                return value !== undefined && value !== null && value !== "";
            }
            
            var _Symbol = '@(Model.Symbol)';
            var _LastPrice = @Model.LastPrice;
            var _Interval = @((int)KlineInterval.OneDay);
            
            var today = new Date();
            var _EndDate = today.toISOString();
            var _StartDate = new Date(today.setMonth(today.getMonth()-1)).toISOString();
            today = new Date();

            const _secondToMS = 1000;
            const _minuteToMS = 60 * _secondToMS;
            const _houtToMS = 60 * _minuteToMS;
            const _dayToMS = 24 * _houtToMS;

            var _Intervals = [];

            var refreshGridLock = false;

            var IntervalDateMap = {
                '@((int)KlineInterval.OneDay)' : {
                    EndDate: today.toISOString(),
                    StartDate: new Date(today-30*2*_dayToMS).toISOString()
                },
                '@((int)KlineInterval.EightHour)' : {
                    EndDate: today.toISOString(),
                    StartDate: new Date(today-30*2*_dayToMS).toISOString()
                },
                '@((int)KlineInterval.FifteenMinutes)' : {
                    EndDate: today.toISOString(),
                    StartDate: new Date(today-7*_dayToMS).toISOString()
                },
                '@((int)KlineInterval.FiveMinutes)' : {
                    EndDate: today.toISOString(),
                    StartDate: new Date(today-7*_dayToMS).toISOString()
                },
                '@((int)KlineInterval.FourHour)' : {
                    EndDate: today.toISOString(),
                    StartDate: new Date(today-30*2*_dayToMS).toISOString()
                },
                '@((int)KlineInterval.OneHour)' : {
                    EndDate: today.toISOString(),
                    StartDate: new Date(today-30*2*_dayToMS).toISOString()
                },
                '@((int)KlineInterval.OneMinute)' : {
                    EndDate: today.toISOString(),
                    StartDate: new Date(today-7*_dayToMS).toISOString()
                },
                '@((int)KlineInterval.OneMonth)' : {
                    EndDate: today.toISOString(),
                    StartDate: new Date(today-365*3*_dayToMS).toISOString()
                },
                '@((int)KlineInterval.OneWeek)' : {
                    EndDate: today.toISOString(),
                    StartDate: new Date(today-365*3*_dayToMS).toISOString()
                },
                '@((int)KlineInterval.SixHour)' : {
                    EndDate: today.toISOString(),
                    StartDate: new Date(today-30*2*_dayToMS).toISOString()
                },
                '@((int)KlineInterval.ThirtyMinutes)' : {
                    EndDate: today.toISOString(),
                    StartDate: new Date(today-7*_dayToMS).toISOString()
                },
                '@((int)KlineInterval.ThreeDay)' : {
                    EndDate: today.toISOString(),
                    StartDate: new Date(today-30*2*3*_dayToMS).toISOString()
                },
                '@((int)KlineInterval.ThreeMinutes)' : {
                    EndDate: today.toISOString(),
                    StartDate: new Date(today-7*_dayToMS).toISOString()
                },
                '@((int)KlineInterval.TwelveHour)' : {
                    EndDate: today.toISOString(),
                    StartDate: new Date(today-30*2*_dayToMS).toISOString()
                },
                '@((int)KlineInterval.TwoHour)' : {
                    EndDate: today.toISOString(),
                    StartDate: new Date(today-30*2*_dayToMS).toISOString()
                }
            };

            var chartDataSource = new DevExpress.data.CustomStore({
                key: "Id",
                load: function (loadOptions) {
                    var deferred = $.Deferred(),
                        args = {
                            Symbol: _Symbol,
                            Interval: _Interval,
                            EndDate: _EndDate,
                            StartDate: _StartDate
                        };

                    $.ajax({
                        url: "/Trade/GetKlines",
                        method: "POST",
                        dataType: "json",
                        data: args,
                        success: function(result) {
                            deferred.resolve(result);
                        },
                        error: function() {
                            deferred.reject("Data Loading Error");
                        },
                        timeout: 50000
                    });

                    return deferred.promise();
                }
            });

            $("#chart").dxChart({
                title: "Chart",
                dataSource: chartDataSource,
                commonSeriesSettings: {
                    argumentField: "CloseTimeStr",
                    type: "candlestick"
                },
                legend: {
                    itemTextPosition: 'left',
                    visible: false                    
                },
                series: [
                    { 
                        name: _Symbol,
                        openValueField: "Open", 
                        highValueField: "High", 
                        lowValueField: "Low", 
                        closeValueField: "Close", 
                        reduction: {
                            color: "red"
                        }
                    }
                ],    
                valueAxis: {
                    tickInterval: 1,
                    title: { 
                        text: ""
                    },
                    label: {
                        format: {
                            type: "decimal"
                        }
                    }
                },
                argumentAxis: {
                    workdaysOnly: false,
                    label: {
                        format: "shortDate"
                    }
                },
                "export": {
                    enabled: false
                },
                tooltip: {
                    enabled: true,
                    location: "edge",
                    customizeTooltip: function (arg) {
                        return {
                            text: 
                                "Open:  " + arg.openValue + "<br/>" +
                                "Close: " + arg.closeValue + "<br/>" +
                                "High:  " + arg.highValue + "<br/>" +
                                "Low:   " + arg.lowValue + "<br/>"
                        };
                    }
                }
            });

            $.ajax({
                url: "/Trade/GetIntervals",
                method: "POST",
                dataType: "json",
                data: null,
                success: function(result) {
                    _Intervals = result;
                    $("#dd_Interval").dxSelectBox({
                        dataSource: _Intervals,
                        valueExpr: "Id",
                        displayExpr: "Value",
                        placeholder: "Interval",
                        onValueChanged: function(data) {
                            _StartDate = IntervalDateMap[data.value].StartDate;
                            _EndDate = IntervalDateMap[data.value].EndDate;
                            _Interval = data.value;
                            refreshGridLock = true;
                            $("#dt_StartDate").dxDateBox("instance").option("value", _StartDate);
                            $("#dt_EndDate").dxDateBox("instance").option("value", _EndDate);
                            $("#chart").dxChart("instance").refresh();
                            refreshGridLock = false;
                        }
                    });
                    $("#dd_Interval").dxSelectBox("instance").option("value", _Interval);
                },
                error: function() {

                },
                timeout: 50000
            });

            $("#dt_StartDate").dxDateBox({
                type: "date",
                value: _StartDate,
                displayFormat: "dd/MM/yyyy",
                onValueChanged: function(data) {
                    _StartDate = data.value;
                    if (!refreshGridLock) {
                        $("#chart").dxChart("instance").refresh();
                    }                        
                }
            });

            $("#dt_EndDate").dxDateBox({
                type: "date",
                value: _EndDate,
                displayFormat: "dd/MM/yyyy",
                onValueChanged: function(data) {
                    _EndDate = data.value;
                    if (!refreshGridLock) {
                        $("#chart").dxChart("instance").refresh();
                    }
                }
            });

            const tabItems = [
                { 
                    text: "Limit",
                    txt_BuySymbol_Label: "Buy"
                },
                {
                    text: "Market",
                    txt_BuySymbol_Label: "Instant Buy"
                }
            ];

            $('#tab_Trade').dxTabs({                
                dataSource: tabItems,
                selectedIndex: 0,
                onItemClick(e) {                    
                    if (e.itemData.text == "Limit") {
                        $("#tab_Limit_Content").show();
                    }
                    else {
                        $("#tab_Limit_Content").hide();
                    }
                }
            });

            const buyOrders = [];
            const sellOrders = [];

            const buyOrdersStore = new DevExpress.data.ArrayStore({
                key: 'Price',
                data: buyOrders,
            });

            const sellOrdersStore = new DevExpress.data.ArrayStore({
                key: 'Price',
                data: sellOrders,
            });

            const buyOrderColumns = [ { dataField: "Price", sortOrder: 'asc' }, { dataField: "Quantity" }, { dataField: "Total" } ];
            const sellOrderColumns = [ { dataField: "Price", sortOrder: 'desc' }, { dataField: "Quantity" }, { dataField: "Total" } ];

            var _grd_buyOrders, _grd_sellOrders;

            let base_ws_url = "wss://stream.binance.com:9443/ws";
            let orderBookWs = new WebSocket(`${base_ws_url}/${_Symbol.toLowerCase()}@@depth`);
            let lastUpdateTime = new Date();
            orderBookWs.onmessage = (event) => {

                var leftDate = new Date(lastUpdateTime - -1 * _secondToMS);
                var rightDate = new Date();

                if (leftDate < rightDate) {

                    var new_sellOrders = JSON.parse(event.data).b.map(function(val) { 
                        return { 
                            Price: parseFloat(val[0]), 
                            Quantity: parseFloat(val[1]), 
                            Total: val[0] * val[1] 
                        }; 
                    });

                    var new_buyOrders = JSON.parse(event.data).a.map(function(val) { 
                        return { 
                            Price: parseFloat(val[0]), 
                            Quantity: parseFloat(val[1]), 
                            Total: val[0] * val[1] 
                        }; 
                    });

                    for (o in new_buyOrders) {
                        var order = new_buyOrders[o];
                        var isUpdate = (buyOrdersStore._array.map(x => x.Price).includes(order.Price));
                        if (isUpdate) {
                            if (parseFloat(order.Quantity) > 0) {
                                buyOrdersStore.push([{ type: 'update', data: order, key: order.Price }]);
                            }
                            else {
                                buyOrdersStore.remove(order.Price);
                            }
                        }
                        else {
                            if (parseFloat(order.Quantity) > 0) {
                                buyOrdersStore.push([{ type: 'insert', data: order }]);
                            }
                        }
                    }

                    for (o in new_sellOrders) {
                        var order = new_sellOrders[o];
                        var isUpdate = (sellOrdersStore._array.map(x => x.Price).includes(order.Price));
                        if (isUpdate) {
                            if (parseFloat(order.Quantity) > 0) {
                                sellOrdersStore.push([{ type: 'update', data: order, key: order.Price }]);
                            }
                            else {
                                sellOrdersStore.remove(order.Price);
                            }
                        }
                        else {
                            if (parseFloat(order.Quantity) > 0) {
                                sellOrdersStore.push([{ type: 'insert', data: order }]);
                            }
                        }
                    }

                    if (_grd_buyOrders == null) {
                        _grd_buyOrders = $("#grd_buyOrders").dxDataGrid({
                            dataSource: {
                                store: buyOrdersStore,
                                reshapeOnPush: true,
                            },
                            columns: buyOrderColumns,
                            repaintChangesOnly: true,
                            columnAutoWidth: true,
                            showBorders: true,
                            paging: {
                                pageSize: 9
                            },
                            pager: {
                                showPageSizeSelector: true,
                                allowedPageSizes: [6, 9, 18, 36, 72, 144]
                            },
                        }).dxDataGrid("instance");
                    }
                    else {
                        @* _grd_buyOrders.refresh(); *@
                    }

                    if (_grd_sellOrders == null) {
                        _grd_sellOrders = $("#grd_sellOrders").dxDataGrid({
                            dataSource: {
                                store: sellOrdersStore,
                                reshapeOnPush: true,
                            },
                            columns: sellOrderColumns,
                            repaintChangesOnly: true,
                            columnAutoWidth: true,
                            showBorders: true,
                            paging: {
                                pageSize: 9
                            },
                            pager: {
                                showPageSizeSelector: true,
                                allowedPageSizes: [6, 9, 18, 36, 72, 144]
                            },
                        }).dxDataGrid("instance");
                    } 
                    else {
                        @* _grd_sellOrders.refresh(); *@
                    }
                    
                    lastUpdateTime = rightDate;
                }
            }
        });

    </script>
}